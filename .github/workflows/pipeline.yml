name: CI con Tests y SonarCloud

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout del código
      uses: actions/checkout@v3

    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov

    - name: Ejecutar pruebas con cobertura
      run: |
        pytest --cov=turnero --cov-report=xml
    
    - name: Ejecutar pruebas con detalles
      run: |
        pytest -v --cov=turnero --cov-report=term
    
    - name: Notificar en Discord si fallan los tests
      if: failure()  
      uses: Ilshidur/action-discord@master
      with:
        args: |
          "🚨 Fallaron las pruebas automáticas del proyecto turnero. Te conviene revisar el workflow en GitHub Actions je :(."
          🔍 Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    
    - name: Notificar en Discord - Tests OK
      if: success()
      uses: Ilshidur/action-discord@master
      with:
        args:  |
          "✅ COOOrrectooo diría Susana. Las pruebas automáticas del proyecto turnero pasaron exitosamente"
          🔍 Ver detalles: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
    
    - name: Escaneo SonarCloud
      uses: SonarSource/sonarcloud-github-action@master
      with:
        projectBaseDir: .
        args: >
          -Dsonar.python.coverage.reportPaths=coverage.xml
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_PROJECT_KEY: ${{ secrets.SONAR_PROJECT_KEY }}
        SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

